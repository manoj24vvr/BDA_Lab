
Scala commands

val text=sc.textFile("/user/in")
val count = text.flatMap(line=>line.split(" "))
count.collect;
val mapf=count.map(word=>(word,1))
val reducerf = mapf.reduceByKey(_+_)
reducerf.collect;
val countf = mapf.countByValue()

q1. find sum of employees department wise
q2. find the tuples based on class sensitivity

Send dataset to hdfs dfs -copyfromlocal /batch_4/200968174/employees.csv
get data from hdfs
val df = spark.read.option("header","true").csv("/batch_4/200968174/employees.csv") 

change datatype 
df.select(col("salary").cast("int").as("salary")) //skip this command, not necessary might not work also
							do the neeche ka thing instead

answer to q1
df.groupBy("DEPARTMENT_ID").agg(sum("SALARY")).show(false)

answer to q2
df2.groupBy("DEPARTMENT_ID", "GENDER").agg(count("GENDER")).show



--> creating a dataframe
val df = Seq(   (1, 2),   (3, 4),   (5, 6),   (7, 8) ).toDF("col1", "col2")

-->SUM
val sumDF = df.withColumn("sum", $"col1" + $"col2")
sumDF.show()

-->DIFF
val diffDF = df.withColumn("diff", $"col1" * $"col2")

-->PROD
val profDF = df.withColumn("product", $"col1" * $"col2")
profDF.show()
-->DIV
val divDF = df.withColumn("div", $"col1" / $"col2")

avg() - val avgAgeDF = df.agg(avg("age"))
approx_count_distinct() - val approxDistinctDF = df.agg(approx_count_distinct("age"))
collect_list() - val collectedListdf = df.groupBy("name").agg(collect_list("age"))
collect_set() - val collectedSetDF = df.groupBy("name").agg(collect_set("age"))
count() - val totalRowsDF = df.count()
countDistinct() - val distinctCountDF = df.agg(countDistinct("age"))


--------------------------------------------------------
spark with python

pyspark

words=sc.textFile("/user/in").flatMap(lambda line:line.split(" "))
a=words.map(lambda word:(word,1))
b=a.reduceByKey(lambda a,b:a+b)

from pyspark import SparkContext
if __name__ == "__main__":
	sc = SparkContext("local", "word count")
	sc.setLogLevel("ERROR")                                       

	lines = sc.textFile("/user/in")
	words = lines.flatMap(lambda line: line.split(" "))
	wc = words.countByValue()
	for word, count in wc.items():
		print("{}:{}".format(word, count))
	sc.stop()
	
-------------------------------------------------------------------
L7) Demonstrate the built in functions using Scala by creating an array, perform following functions:

val arr = Array(1, 2, 3, 4, 5)

***Non parameterized function***
def printHello(): Unit = {
  println("Hello World!")
}
printHello()

***parameterized function***
def printArray(arr: Array[Int]): Unit = {
  for (i <- arr) {
    println(i)
  }
}
printArray(arr)

***recursion function***
def factorial(num: Int): Int = {
  if (num <= 1) {
    1
  } else {
    num * factorial(num - 1)
  }
}
println(factorial(5))

***function parameter with default value***
def greet(name: String = "World"): Unit = {
  println(s"Hello, $name!")
}
greet()

***anonymous functions***
val addOne = (x: Int) => x + 1
println(addOne(5)) 


***functions with map method***
val squares = arr.map(x => x * x)
println(squares.mkString(", "))

***currying functions***
def add(x: Int)(y: Int): Int = x + y
println(add(2)(3))

***nested functions***
def multiplyByFactor(factor: Int)(arr: Array[Int]): Array[Int] = {
  def multiply(num: Int): Int = num * factor
  arr.map(x => multiply(x))
}
println(multiplyByFactor(3)(arr).mkString(", "))

---------------------------
Non-parameterized function:
This is a function that does not take any input parameters. In the code snippet, printHello() is an example of a non-parameterized function. It simply prints out a message.

Parameterized function:
This is a function that takes one or more input parameters. In the code snippet, printArray(arr: Array[Int]) is an example of a parameterized function. It takes an array of integers as input and prints out each element of the array.

Recursion function:
This is a function that calls itself repeatedly until it reaches a base case. In the code snippet, factorial(num: Int) is an example of a recursion function. It calculates the factorial of a given number by calling itself recursively.

Function parameter with default value:
This is a function that has a default value assigned to one or more of its parameters. In the code snippet, greet(name: String = "World") is an example of a function parameter with default value. It takes a string parameter and prints out a greeting message with the input name. If no name is provided, it defaults to "World".

Anonymous function:
This is a function that does not have a name and is created on the fly. In the code snippet, addOne = (x: Int) => x + 1 is an example of an anonymous function. It takes an integer input and adds one to it.

Functions with map method:
This is a higher-order function that applies a given function to each element of an array and returns a new array with the results. In the code snippet, squares = arr.map(x => x * x) is an example of a function with the map method. It squares each element of the input array and returns a new array with the squared values.

Currying functions:
This is a technique of transforming a function that takes multiple arguments into a series of functions that each take a single argument. In the code snippet, add(x: Int)(y: Int) is an example of a curried function. It takes two integer inputs and returns their sum.

Nested functions:
This is a function that is defined inside another function. In the code snippet, multiplyByFactor(factor: Int)(arr: Array[Int]) is an example of a nested function. It takes an integer input and an array of integers, and returns a new array with each element multiplied by the input integer. The multiply() function is defined inside the multiplyByFactor() function and is used to perform the multiplication operation.

